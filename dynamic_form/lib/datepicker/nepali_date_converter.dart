
import 'package:dynamic_form/constants/dynamic_form_constants.dart';
import 'package:dynamic_form/utils/log_utils.dart';
import 'package:flutter/material.dart';

class NepaliDateConverter {
   static int startingNepYear = 1970;

   static int startingNepMonth = 1;

   static int startingNepDay = 1;

   static int startDayOfWeek = DateTime.sunday;

   static int dayOfWeek = startDayOfWeek;

   static int startingEngYear = 1913;

   static int startingEngMonth = 4;

   static int startingEngDay = 13;


   static Map<int,List<int>> nepaliMap = Map.unmodifiable({
      1970:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      1971:[0,31,31,32,31,32,30,30,29,30,29,30,30],
      1972:[0,31,32,31,32,31,30,30,30,29,29,30,30],
      1973:[0,30,32,31,32,31,30,30,30,29,30,29,31],
      1974:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      1975:[0,31,31,32,32,31,31,30,29,30,29,30,30],
      1976:[0,31,32,31,32,31,30,30,30,29,29,30,31],
      1977:[0,30,32,31,32,31,31,29,30,29,30,29,31],
      1978:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      1979:[0,31,31,32,32,31,30,30,29,30,29,30,30],
      1980:[0,31,32,31,32,31,30,30,30,29,29,30,31],
      1981:[0,31,31,31,32,31,31,29,30,30,29,30,30],
      1982:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      1983:[0,31,31,32,32,31,30,30,29,30,29,30,30],
      1984:[0,31,32,31,32,31,30,30,30,29,29,30,31],
      1985:[0,31,31,31,32,31,31,29,30,30,29,30,30],
      1986:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      1987:[0,31,32,31,32,31,30,30,29,30,29,30,30],
      1988:[0,31,32,31,32,31,30,30,30,29,29,30,31],
      1989:[0,31,31,31,32,31,31,30,29,30,29,30,30],
      1990:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      1991:[0,31,32,31,32,31,30,30,30,29,29,30,30],
      1992:[0,31,32,31,32,31,30,30,30,29,30,29,31],
      1993:[0,31,31,31,32,31,31,30,29,30,29,30,30],
      1994:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      1995:[0,31,32,31,32,31,30,30,30,29,29,30,30],
      1996:[0,31,32,31,32,31,30,30,30,29,30,29,31],
      1997:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      1998:[0,31,31,32,31,31,31,30,29,30,29,30,30],


      1999:[0,31,32,31,32,31,30,30,30,29,29,30,31],
      2000:[0,30,32,31,32,31,30,30,30,29,30,29,31],
      2001:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      2002:[0,31,31,32,32,31,30,30,29,30,29,30,30],
      2003:[0,31,32,31,32,31,30,30,30,29,29,30,31],
      2004:[0,30,32,31,32,31,30,30,30,29,30,29,31],
      2005:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      2006:[0,31,31,32,32,31,30,30,29,30,29,30,30],
      2007:[0,31,32,31,32,31,30,30,30,29,29,30,31],
      2008:[0,31,31,31,32,31,31,29,30,30,29,29,31],
      2009:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      2010:[0,31,31,32,32,31,30,30,29,30,29,30,30],
      2011:[0,31,32,31,32,31,30,30,30,29,29,30,31],
      2012:[0,31,31,31,32,31,31,29,30,30,29,30,30],
      2013:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      2014:[0,31,31,32,32,31,30,30,29,30,29,30,30],
      2015:[0,31,32,31,32,31,30,30,30,29,29,30,31],
      2016:[0,31,31,31,32,31,31,29,30,30,29,30,30],
      2017:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      2018:[0,31,32,31,32,31,30,30,29,30,29,30,30],
      2019:[0,31,32,31,32,31,30,30,30,29,30,29,31],
      2020:[0,31,31,31,32,31,31,30,29,30,29,30,30],
      2021:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      2022:[0,31,32,31,32,31,30,30,30,29,29,30,30],
      2023:[0,31,32,31,32,31,30,30,30,29,30,29,31],
      2024:[0,31,31,31,32,31,31,30,29,30,29,30,30],
      2025:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      2026:[0,31,32,31,32,31,30,30,30,29,29,30,31],
      2027:[0,30,32,31,32,31,30,30,30,29,30,29,31],
      2028:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      2029:[0,31,31,32,31,32,30,30,29,30,29,30,30],
      2030:[0,31,32,31,32,31,30,30,30,29,29,30,31],
      2031:[0,30,32,31,32,31,30,30,30,29,30,29,31],
      2032:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      2033:[0,31,31,32,32,31,30,30,29,30,29,30,30],
      2034:[0,31,32,31,32,31,30,30,30,29,29,30,31],
      2035:[0,30,32,31,32,31,31,29,30,30,29,29,31],
      2036:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      2037:[0,31,31,32,32,31,30,30,29,30,29,30,30],
      2038:[0,31,32,31,32,31,30,30,30,29,29,30,31],
      2039:[0,31,31,31,32,31,31,29,30,30,29,30,30],
      2040:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      2041:[0,31,31,32,32,31,30,30,29,30,29,30,30],
      2042:[0,31,32,31,32,31,30,30,30,29,29,30,31],
      2043:[0,31,31,31,32,31,31,29,30,30,29,30,30],
      2044:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      2045:[0,31,32,31,32,31,30,30,29,30,29,30,30],
      2046:[0,31,32,31,32,31,30,30,30,29,29,30,31],
      2047:[0,31,31,31,32,31,31,30,29,30,29,30,30],
      2048:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      2049:[0,31,32,31,32,31,30,30,30,29,29,30,30],
      2050:[0,31,32,31,32,31,30,30,30,29,30,29,31],
      2051:[0,31,31,31,32,31,31,30,29,30,29,30,30],
      2052:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      2053:[0,31,32,31,32,31,30,30,30,29,29,30,30],
      2054:[0,31,32,31,32,31,30,30,30,29,30,29,31],
      2055:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      2056:[0,31,31,32,31,32,30,30,29,30,29,30,30],
      2057:[0,31,32,31,32,31,30,30,30,29,29,30,31],
      2058:[0,30,32,31,32,31,30,30,30,29,30,29,31],
      2059:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      2060:[0,31,31,32,32,31,30,30,29,30,29,30,30],
      2061:[0,31,32,31,32,31,30,30,30,29,29,30,31],
      2062:[0,30,32,31,32,31,31,29,30,29,30,29,31],
      2063:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      2064:[0,31,31,32,32,31,30,30,29,30,29,30,30],
      2065:[0,31,32,31,32,31,30,30,30,29,29,30,31],
      2066:[0,31,31,31,32,31,31,29,30,30,29,29,31],
      2067:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      2068:[0,31,31,32,32,31,30,30,29,30,29,30,30],
      2069:[0,31,32,31,32,31,30,30,30,29,29,30,31],
      2070:[0,31,31,31,32,31,31,29,30,30,29,30,30],
      2071:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      2072:[0,31,32,31,32,31,30,30,29,30,29,30,30],
      2073:[0,31,32,31,32,31,30,30,30,29,29,30,31],
      2074:[0,31,31,31,32,31,31,30,29,30,29,30,30],
      2075:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      2076:[0,31,32,31,32,31,30,30,30,29,29,30,30],
      2077:[0,31,32,31,32,31,30,30,30,29,30,29,31],
      2078:[0,31,31,31,32,31,31,30,29,30,29,30,30],
      2079:[0,31,31,32,31,31,31,30,29,30,29,30,30],
      2080:[0,31,32,31,32,31,30,30,30,29,29,30,30],
      2081:[0,31,31,32,32,31,30,30,30,29,30,30,30],
      2082:[0,30,32,31,32,31,30,30,30,29,30,30,30],
      2083:[0,31,31,32,31,31,30,30,30,29,30,30,30],
      2084:[0,31,31,32,31,31,30,30,30,29,30,30,30],
      2085:[0,31,32,31,32,30,31,30,30,29,30,30,30],
      2086:[0,30,32,31,32,31,30,30,30,29,30,30,30],
      2087:[0,31,31,32,31,31,31,30,30,29,30,30,30],
      2088:[0,30,31,32,32,30,31,30,30,29,30,30,30],
      2089:[0,30,32,31,32,31,30,30,30,29,30,30,30],
      2090:[0,30,32,31,32,31,30,30,30,29,30,30,30],
   });

   static Map<int,String> nepaliMonth = Map.unmodifiable({
      1:"Baisakh",
      2:"Jestha",
      3:"Ashar",
      4:"Shrawan",
      5:"Bhadra",
      6:"Ashoj",
      7:"Kartik",
      8:"Mangsir",
      9:"Poush",
      10:"Magh",
      11:"Falgun",
      12:"Chaitra"
   });

   static Map<int,String> englishMonth = Map.unmodifiable({
      1:"January",
      2:"February",
      3:"March",
      4:"April",
      5:"May",
      6:"June",
      7:"July",
      8:"August",
      9:"September",
      10:"October",
      11:"November",
      12:"December"
   });

   static DateTime convertBSToAD(int year, int month, int day) {
      appLog("$year-$month-$day BS ");
      int totalNepDaysCount = 0;
      // count total days in-terms of year
      for (int i = startingNepYear; i < year; i++) {
         for (int j = 1; j <= 12; j++) {
            totalNepDaysCount += nepaliMap[i][j];
         }
      }

      // count total days in-terms of month
      for (int j = startingNepMonth; j < month; j++) {
         totalNepDaysCount += nepaliMap[year][j];
      }

      // count total days in-terms of date
      totalNepDaysCount += day - startingNepDay;

      DateTime dateAD = DateTime.utc(startingEngYear,startingEngMonth,startingEngDay,0,0,0,0,0);
      var convertedDate = dateAD.add(Duration(days: totalNepDaysCount));
      return convertedDate;
   }

   static String convertADToBS(int year, int month, int day) {

      appLog("$year-$month-$day AD");
      DateTime dateAD = DateTime.utc(year,month,day,0,0,0,0,0);
      DateTime startingAD = DateTime.utc(startingEngYear,startingEngMonth,startingEngDay,0,0,0,0,0);

      if(dateAD.isBefore(startingAD)){
         return DATE_LIMIT_CROSSED;
      }

      int days =calculateDays(startingAD,dateAD);

      appLog("Days: $days");

      int nepYY = startingNepYear;
      int nepMM = startingNepMonth;
      int nepDD = startingNepDay;

      while (days != 0) {
         int daysInMonth = nepaliMap[nepYY][nepMM];
         nepDD++;
         if (nepDD > daysInMonth) {
            nepMM++;
            nepDD = 1;
         }
         if (nepMM > 12) {
            nepYY++;
            nepMM = 1;
         }
         dayOfWeek++;
         if (dayOfWeek > 7) {
            dayOfWeek = 1;
         }
         days--;
      }
      String finalMonth = "$nepMM";
      if (finalMonth.length < 2) finalMonth = "0" + finalMonth;
      String finalDate = "$nepDD";
      if (finalDate.length < 2) finalDate = "0" + finalDate;

      return "$nepYY-$finalMonth-$finalDate";
   }

   static int calculateDays(DateTime first, DateTime second) {

      int diff = second.difference(first).inMilliseconds;

      int diff1 = (diff / (24*60*60*1000)).round();

      DateTime calendar = DateTime.utc(1986,1,1);

      if(second.millisecond > calendar.millisecond) {
         diff1 ++;
         appLog("diff1 incremented: ${diff1}");
      }

//      appLog("diff1 got : ${diff1.toInt()}");
      return diff1.toInt();
   }

  static String dateTimeToString(DateTime date) {
      String YYYY = date.year.toString();
      String MM = date.month.toString();
      if (MM.length < 2) MM = "0" + MM;
      String DD = date.day.toString();
      if (DD.length < 2) DD = "0" + DD;
      return YYYY + "-" + MM + "-" + DD;
  }

  static DateTime getDateTimeFromString(String stringDate) {
      var splittedDate = stringDate.split('-');
      int year = int.parse(splittedDate[0]);
      int month = int.parse(splittedDate[1]);
      int day = int.parse(splittedDate[2]);
      return DateTime.utc(year,month,day);
  }

   static int getYearFromDate(String date) {
      var dateValue = date.split('-');
      return int.parse(dateValue[0]);
   }

   static int getMonthFromDate(String date) {
      var dateValue = date.split('-');
      return int.parse(dateValue[1]);
   }

   static int getDayFromDate(String date) {
      var dateValue = date.split('-');
      return int.parse(dateValue[2]);
   }



}